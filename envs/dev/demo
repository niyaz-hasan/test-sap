######################## locals ########################
# Create a map: db_name => { bucket, prefix, suffix }
locals {
  db_map = {
    for idx, db_name in var.database_names : db_name => {
      bucket = var.bucket_mapping[idx]
      prefix = startswith(db_name, "db_gd") ? "crw_bay_gda" : "qc_grc"
      suffix = reverse(split("_", db_name))[0]
    }
  }
}

################################### glue catalog database #########################################################

resource "aws_glue_catalog_database" "db" {
  for_each = local.db_map

  name        = each.key
  description = "Glue DB for ${each.key}"
}

################################# glue crawler #########################################################################

resource "aws_glue_crawler" "crawler" {
  for_each = local.db_map

  name          = "${each.value.prefix}_${each.value.suffix}-dev"
  database_name = aws_glue_catalog_database.db[each.key].name
  role          = var.iam_role_arn

  s3_target {
    path = "s3://${each.value.bucket}/"
  }
}

################################################################# terraform #################################################
name: Terraform Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:

jobs:
  terraform:
    name: Terraform Deploy
    runs-on: ubuntu-latest

    permissions:
      id-token: write   # for OIDC auth
      contents: read

    env:
      TF_WORKING_DIR: ./envs/dev

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5

      # Authenticate with AWS using OIDC
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::123456789012:role/GithubActionsTerraformRole
          aws-region: us-east-1

      - name: Terraform Init
        run: terraform -chdir=$TF_WORKING_DIR init

      - name: Terraform Format
        run: terraform fmt -check -recursive

      - name: Terraform Validate
        run: terraform -chdir=$TF_WORKING_DIR validate

      - name: Terraform Plan
        run: terraform -chdir=$TF_WORKING_DIR plan -out=tfplan

######################################################################################
# üìä AWS Serverless Data Pipeline with Terraform

This repository provisions a modular, serverless data pipeline using **Amazon S3**, **AWS Glue**, and **Amazon Athena**. It enables scalable ETL workflows and SQL-based analytics on structured and semi-structured data.

---

## üìê Architecture Overview


---

## üì¶ Modules

- `s3/`: Creates buckets for raw and processed data.
- `glue/`: Provisions Glue crawlers, jobs, and catalog databases.
- `athena/`: Sets up Athena workgroups and query configurations.

---

## ‚öôÔ∏è Features

- Modular Terraform design with `for_each` and `count` for safe resource management
- Cross-module output referencing for clean dependency mapping
- IAM roles scoped for least privilege access
- Future-proofed for multi-environment deployment

---

## üöÄ Getting Started

### Prerequisites

- Terraform ‚â• 1.0
- AWS CLI configured
- IAM permissions for Glue, S3, Athena

### Deployment

```bash
terraform init
terraform plan
terraform apply
